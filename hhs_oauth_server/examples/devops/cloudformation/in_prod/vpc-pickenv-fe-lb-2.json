{
  "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Full Deployment Script to choose environment, build LoadBalancer Server",
  "Metadata": {
    "AWS::CloudFormation::Designer": {
      "25af43bb-a438-4ab1-95f3-a75ccb55a8e0": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 400,
          "y": 150
        },
        "z": 0,
        "embeds": [],
        "ismemberof": [
          "c3783791-0069-4324-8453-123708403b5f"
        ]
      },
      "ccaf1f4f-226d-426c-98dd-2d40c521faac": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 407.1666666666667,
          "y": 54.666666666666664
        },
        "z": 0,
        "embeds": [],
        "ismemberof": [
          "c3783791-0069-4324-8453-123708403b5f"
        ]
      },
      "c3783791-0069-4324-8453-123708403b5f": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 310,
          "y": 30
        },
        "z": 0,
        "embeds": []
      },
      "edac4598-f770-4f35-afca-37b85d0499f3": {
        "source": {
          "id": "ccaf1f4f-226d-426c-98dd-2d40c521faac"
        },
        "target": {
          "id": "c3783791-0069-4324-8453-123708403b5f"
        },
        "z": 1
      },
      "8af86a4e-f1e7-4e5d-92cb-0acef1900f7f": {
        "source": {
          "id": "25af43bb-a438-4ab1-95f3-a75ccb55a8e0"
        },
        "target": {
          "id": "c3783791-0069-4324-8453-123708403b5f"
        },
        "z": 11
      },
      "45524452-309f-4038-bca6-5a7a5f01df22": {
        "source": {
          "id": "25af43bb-a438-4ab1-95f3-a75ccb55a8e0"
        },
        "target": {
          "id": "c3783791-0069-4324-8453-123708403b5f"
        },
        "z": 1
      },
      "e82b4266-5a0d-480d-a8fb-1dc01afd5599": {
        "source": {
          "id": "ccaf1f4f-226d-426c-98dd-2d40c521faac"
        },
        "target": {
          "id": "c3783791-0069-4324-8453-123708403b5f"
        },
        "z": 2
      },
      "8c7ca01e-c682-4ff0-bdde-06b7e176e7c5": {
        "source": {
          "id": "c3783791-0069-4324-8453-123708403b5f"
        },
        "target": {
          "id": "65ce014a-b543-4f02-b13d-7065981f348d"
        },
        "z": 3
      }
    }
  },
  "Mappings": {
      "AWSInstanceType2Arch": {
          "t2.medium": {
              "Arch": "HVM"
          },
          "m1.medium": {
              "Arch": "PV"
          },
          "m1.large": {
              "Arch": "PV"
          },
          "m1.xlarge": {
              "Arch": "PV"
          },
          "m2.xlarge": {
              "Arch": "PV"
          },
          "m2.2xlarge": {
              "Arch": "PV"
          },
          "m2.4xlarge": {
              "Arch": "PV"
          },
          "m3.medium": {
              "Arch": "HVM"
          },
          "m3.large": {
              "Arch": "HVM"
          },
          "m3.xlarge": {
              "Arch": "HVM"
          },
          "m3.2xlarge": {
              "Arch": "HVM"
          },
          "c1.medium": {
              "Arch": "PV"
          },
          "c1.xlarge": {
              "Arch": "PV"
          },
          "c3.large": {
              "Arch": "HVM"
          },
          "c3.xlarge": {
              "Arch": "HVM"
          },
          "c3.2xlarge": {
              "Arch": "HVM"
          },
          "c3.4xlarge": {
              "Arch": "HVM"
          },
          "c3.8xlarge": {
              "Arch": "HVM"
          },
          "r3.large": {
              "Arch": "HVM"
          },
          "r3.xlarge": {
              "Arch": "HVM"
          },
          "r3.2xlarge": {
              "Arch": "HVM"
          },
          "r3.4xlarge": {
              "Arch": "HVM"
          },
          "r3.8xlarge": {
              "Arch": "HVM"
          },
          "i2.xlarge": {
              "Arch": "HVM"
          },
          "i2.2xlarge": {
              "Arch": "HVM"
          },
          "i2.4xlarge": {
              "Arch": "HVM"
          },
          "i2.8xlarge": {
              "Arch": "HVM"
          },
          "hi1.4xlarge": {
              "Arch": "HVM"
          },
          "hs1.8xlarge": {
              "Arch": "HVM"
          },
          "cr1.8xlarge": {
              "Arch": "HVM"
          },
          "cc2.8xlarge": {
              "Arch": "HVM"
          }
      },
      "AWSRegionArch2AMI": {
          "us-east-1": {
              "PV": "ami-d8c7aecf",
              "HVM": "ami-28c2ab3f"
          },
          "us-east-1a": {
              "PV": "ami-d8c7aecf",
              "HVM": "ami-28c2ab3f"
          },
          "us-east-1b": {
              "PV": "ami-d8c7aecf",
              "HVM": "ami-28c2ab3f"
          },
          "us-east-1c": {
              "PV": "ami-d8c7aecf",
              "HVM": "ami-28c2ab3f"
          }
      },
      "VPCEnvironment": {
          "us-east-1": {
              "dev": "vpc-80bdc3e7",
              "test": "vpc-5d5a163a",
              "impl": "vpc-5fd4de38",
              "prod": "vpc-9b3fc9fd"
          }
      },
      "StackZone": {
          "dev": {
              "az1": "dev-az1",
              "az2": "dev-az2",
              "az3": "dev-az3"
          },
          "impl": {
              "az1": "impl-az1",
              "az2": "impl-az2",
              "az3": "impl-az3"
          },
          "prod": {
              "az1": "prod-az1",
              "az2": "prod-az2",
              "az3": "prod-az3"
          },
          "test": {
              "az1": "test-az1",
              "az2": "test-az2",
              "az3": "test-az3"
          }
      },
      "EnvLayer": {
          "dev-az1": {
              "dmz": "10.224.78.144/28",
              "web": "10.224.78.0/28",
              "app": "10.224.78.48/28",
              "data": "10.224.78.96/28",
              "mgmt": "10.224.78.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "dev-az2": {
              "dmz": "10.224.78.160/28",
              "web": "10.224.78.16/28",
              "app": "10.224.78.64/28",
              "data": "10.224.78.112/28",
              "mgmt": "10.224.78.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "dev-az3": {
              "dmz": "10.224.78.176/28",
              "web": "10.224.78.32/28",
              "app": "10.224.78.80/28",
              "data": "10.224.78.128/28",
              "mgmt": "10.224.78.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "impl-az1": {
              "dmz": "10.246.44.144/28",
              "web": "10.246.44.0/28",
              "app": "10.246.44.48/28",
              "data": "10.246.44.96/28",
              "mgmt": "10.246.44.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "impl-az2": {
              "dmz": "10.246.44.160/28",
              "web": "10.246.44.16/28",
              "app": "10.246.44.64/28",
              "data": "10.246.44.112/28",
              "mgmt": "10.246.44.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "impl-az3": {
              "dmz": "10.246.44.176/28",
              "web": "10.246.44.32/28",
              "app": "10.246.44.80/28",
              "data": "10.246.44.128/28",
              "mgmt": "10.246.44.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "prod-az1": {
              "dmz": "10.244.44.144/28",
              "web": "10.244.44.0/28",
              "app": "10.244.44.48/28",
              "data": "10.244.44.96/28",
              "mgmt": "10.244.44.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "prod-az2": {
              "dmz": "10.244.44.160/28",
              "web": "10.244.44.16/28",
              "app": "10.244.44.64/28",
              "data": "10.244.44.112/28",
              "mgmt": "10.244.44.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "prod-az3": {
              "dmz": "10.244.44.176/28",
              "web": "10.244.44.32/28",
              "app": "10.244.44.80/28",
              "data": "10.244.44.128/28",
              "mgmt": "10.244.44.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "test-az1": {
              "dmz": "10.224.90.144/28",
              "web": "10.224.90.0/28",
              "app": "10.224.90.48/28",
              "data": "10.224.90.96/28",
              "mgmt": "10.224.90.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "test-az2": {
              "dmz": "10.224.90.160/28",
              "web": "10.224.90.16/28",
              "app": "10.224.90.64/28",
              "data": "10.224.90.112/28",
              "mgmt": "10.224.90.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          },
          "test-az3": {
              "dmz": "10.224.90.176/28",
              "web": "10.224.90.32/28",
              "app": "10.224.90.80/28",
              "data": "10.224.90.128/28",
              "mgmt": "10.224.90.192/26",
              "ocss1": "10.128.11.0/24",
              "ocss2": "10.128.111.0/24"
          }
      },
      "EnvSubNetIdAz": {
          "dev-az1": {
              "dmz": "subnet-82ecfba8",
              "web": "subnet-8decfba7",
              "app": "subnet-80ecfbaa",
              "data": "subnet-8cecfba6"
          },
          "dev-az2": {
              "dmz": "subnet-228e486b",
              "web": "subnet-208e4869",
              "app": "subnet-2f8e4866",
              "data": "subnet-2e8e4867"
          },
          "dev-az3": {
              "dmz": "subnet-79bca821",
              "web": "subnet-7cbca824",
              "app": "subnet-47bca81f",
              "data": "subnet-7bbca823"
          },
          "impl-az1": {
              "dmz": "subnet-b8a17d95",
              "web": "subnet-b9a17d94",
              "app": "subnet-bfa17d92",
              "data": "subnet-b4a17d99"
          },
          "impl-az2": {
              "dmz": "subnet-5535b91c",
              "web": "subnet-5e35b917",
              "app": "subnet-5335b91a",
              "data": "subnet-5c35b915"
          },
          "impl-az3": {
              "dmz": "subnet-860adadd",
              "web": "subnet-bb0adae0",
              "app": "subnet-ba0adae1",
              "data": "subnet-850adade"
          },
          "prod-az1": {
              "dmz": "subnet-c8a91be5",
              "web": "subnet-cea91be3",
              "app": "subnet-cba91be6",
              "data": "subnet-c9a91be4"
          },
          "prod-az2": {
              "dmz": "subnet-a2305deb",
              "web": "subnet-a3305dea",
              "app": "subnet-af305de6",
              "data": "subnet-a0305de9"
          },
          "prod-az3": {
              "dmz": "subnet-1a219641",
              "web": "subnet-1e219645",
              "app": "subnet-1f219644",
              "data": "subnet-19219642"
          },
          "test-az1": {
              "dmz": "subnet-a3d9c289",
              "web": "subnet-acd9c286",
              "app": "subnet-a0d9c28a",
              "data": "subnet-a1d9c28b"
          },
          "test-az2": {
              "dmz": "subnet-9b69a2d2",
              "web": "subnet-9a69a2d3",
              "app": "subnet-9d69a2d4",
              "data": "subnet-9e69a2d7"
          },
          "test-az3": {
              "dmz": "subnet-ac667ef4",
              "web": "subnet-ae667ef6",
              "app": "subnet-ad667ef5",
              "data": "subnet-af667ef7"
          }
      }
  },
  "Parameters": {
     "AZone": {
         "Type": "String",
         "Description": "Launch into Availability Zone",
         "Default": "az1"
     },
     "BuildImageId": {
        "Type": "String",
         "Description": "PV Image",
         "Default": "ami-d8c7aecf"
     },
     "InstanceName" : {
        "Description" : "Easily recognizable name in the EC2 Instance List",
        "Type" : "String",
        "Default" : "Change_this_name_to_Something_unique"
     },
     "TagKeyStack": {
         "Description": "Application Stack Identifier",
         "Type": "String",
         "Default": "dev",
         "AllowedValues": ["dev", "test", "impl", "prod", "sbx", "tools"]
     },
     "TagKeyLayer": {
          "Description": "Application Layer Identifier",
          "Type": "String",
          "Default": "app",
          "AllowedValues": ["dmz", "web", "app", "data", "mgmt", "nat", "jump", "tools"]
     },
     "KeyName": {
      "Description": "EC2 KeyPair for SSH access to instance",
      "Type": "String",
      "Default": "cms_bluebutton_fe_dev",
      "AllowedValues": [
        "cms_bluebutton_fe_dev"
      ]
    },
     "InstanceType": {
      "Description": "RHEL Linux EC2 instance type",
      "Type": "String",
      "Default": "m2.xlarge",
      "AllowedValues": [
        "t2.medium",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    },
     "LBServerName" : {
      "Description": "Linux Server (DNS) Name (Make Unique) prefix environment unless production",
      "Type": "String",
      "Default": "bluebutton.cms.fhirservice.net"
    },
     "PyAppHome": {
       "Description": "Python App Home Base Path",
       "Type": "String",
       "Default": "/var/pyapps/hhs_o_server"
     },
     "LBMaster" : {
       "Description": "LB superuser",
       "Type": "String",
       "Default": "lbapps"
     },
     "pyappsemail" : {
       "Description": "LB apps superuser email",
       "Type": "String",
       "Default": "admin@api.bbonfhir.com"
     },
     "LBPassword" : {
       "Description": "LB superuser password",
       "Type": "String",
       "Default": "R3s3t_Th1s"
     },
     "Route53KeyId": {
       "Description": "Enter the S3 access key ID for pyapps-[TagKeyStack]-content",
       "Type": "String",
       "Default": "Replace with S3 AWS key ID"
     },
     "Route53AccessKey": {
       "Description": "Enter the S3 secret access key for pyapps-[TagKeyStack]-content",
       "Type": "String",
       "Default": "Replace with S3 AWS Key "
     },
     "AppServerIp01":{
       "Description": "Load Balancer pass through to App Server 1 by IP Address",
       "Type": "String",
       "Default": "10.224.78.52"
     },
     "AppServerIp02":{
       "Description": "Load Balancer pass through to App Server 2 by IP Address",
       "Type": "String",
       "Default": "10.224.78.59"
     },
     "Route53Zone": {
       "Description": "Route53 Zone ID for Domain (Default is for fhirservice.net.)",
       "Type": "String",
       "Default": "Z299EFR02VJ9WE"
     },
     "TargetVpcId" : {
       "Type" : "AWS::EC2::VPC::Id",
       "Description" : "VpcId of your existing Virtual Private Cloud (VPC)"
     }
  },
  "Resources": {

    "EC2S3Role" : {
          "Type" : "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "ec2.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
			"Policies": [ {
             "PolicyName": "S3Policy",
             "PolicyDocument" : {
						"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": "*"
						}
					]
				}
			} ]
		  }
		},
    "EC2S3RoleProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
           "Path": "/",
           "Roles": [
             {
               "Ref": "EC2S3Role"
             }
           ]
         }
    },
    "LbEc2SecurityGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Load Balancer: Enable SSH and http/https access to Apache",
        "VpcId" : {"Ref" : "TargetVpcId"},
        "Tags": [
            {
                  "Key": "Name",
                  "Value": {
                      "Ref": "InstanceName"
                  }
              },
            {
                "Key": "Environment",
                "Value": {
                    "Ref": "TagKeyStack"
                }
            },
            {
                "Key": "Layer",
                "Value": {
                    "Ref": "TagKeyLayer"
                }
            }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Fn::FindInMap": ["EnvLayer",
                                         {"Fn::FindInMap": ["StackZone",
                                                            {"Ref": "TagKeyStack"},
                                                            {"Ref": "AZone"}]},
                                         "mgmt"]
            }
          },
          {
            "IpProtocol": "-1",
            "CidrIp": {"Fn::FindInMap": ["EnvLayer",
                                         {"Fn::FindInMap": ["StackZone",
                                                            {"Ref": "TagKeyStack"},
                                                            {"Ref": "AZone"}]},
                                         "ocss1"]
            }
          },
          {
            "IpProtocol": "-1",
            "CidrIp": {"Fn::FindInMap": ["EnvLayer",
                                         {"Fn::FindInMap": ["StackZone",
                                                            {"Ref": "TagKeyStack"},
                                                            {"Ref": "AZone"}]},
                                         "ocss2"]
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Fn::FindInMap": ["EnvLayer",
                                         {"Fn::FindInMap": ["StackZone",
                                                            {"Ref": "TagKeyStack"},
                                                            {"Ref": "AZone"}]},
                                         "app"]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Fn::FindInMap": ["EnvLayer",
                                         {"Fn::FindInMap": ["StackZone",
                                                            {"Ref": "TagKeyStack"},
                                                            {"Ref": "AZone"}]},
                                         "mgmt"]
            }
          },
          {
            "IpProtocol": "-1",
            "CidrIp": {"Fn::FindInMap": ["EnvLayer",
                                         {"Fn::FindInMap": ["StackZone",
                                                            {"Ref": "TagKeyStack"},
                                                            {"Ref": "AZone"}]},
                                         "ocss1"]
            }
          },
          {
            "IpProtocol": "-1",
            "CidrIp": {"Fn::FindInMap": ["EnvLayer",
                                         {"Fn::FindInMap": ["StackZone",
                                                            {"Ref": "TagKeyStack"},
                                                            {"Ref": "AZone"}]},
                                         "ocss2"]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c3783791-0069-4324-8453-123708403b5f"
        }
      }
    },
    "myENI" : {
         "Type" : "AWS::EC2::NetworkInterface",
         "Properties" : {
            "Tags": [{"Key":"Layer","Value":"DMZ"}],
            "Description": "A nice description.",
            "SourceDestCheck": "false",
            "SubnetId": {"Fn::FindInMap": ["EnvSubNetIdAz",
                            {"Fn::FindInMap": ["StackZone",
                                               {"Ref": "TagKeyStack"},
                                               {"Ref": "AZone"}]},
                                           {"Ref": "TagKeyLayer"}]
            }
         }
    },
    "LbEcInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
       "AWS::CloudFormation::Designer": {
          "id": "25af43bb-a438-4ab1-95f3-a75ccb55a8e0"
        },
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Install": [
              "Install"
            ]
          },
          "Install": {
            "packages": {
              "yum": {
                "gcc": [],
                "gcc-c++": [],
                "httpd": [],
                "httpd-devel": [],
                "zlib-devel": [],
                "bzip2-devel": [],
                "mod_wsgi": [],
                "openssl-devel": [],
                "ncurses-devel": [],
                "sqlite-devel": [],
                "readline-devel": [],
                "tk-devel": [],
                "gdbm-devel": [],
                "db4-devel": [],
                "libpcap-devel": [],
                "xz-devel": [],
                "git": [],
                "libxml2-devel": [],
                "libxslt-devel": []
              }
            },
            "groups": {
              "apache": {"gid": "48"}
            },
            "users" : {
              "pyapps": {
                "groups" : ["apache"],
                "uid" : "501",
                "homeDir" : "/home/pyapps"
              }
            }
          }
        }
      },
      "Properties": {
          "ImageId": {
              "Ref": "BuildImageId"
          },

          "IamInstanceProfile": {
              "Ref": "EC2S3RoleProfile"
          },
          "InstanceType": {
              "Ref": "InstanceType"
          },
          "KeyName": {
              "Ref": "KeyName"
          },
          "SecurityGroupIds" : [{"Ref": "LbEc2SecurityGrp"}],
          "SubnetId" : {"Fn::FindInMap": ["EnvSubNetIdAz",
                                          {"Fn::FindInMap": ["StackZone",
                                                             {"Ref": "TagKeyStack"},
                                                             {"Ref": "AZone"}]},
                                          {"Ref": "TagKeyLayer"}]
          },
          "Tags": [
              {
                  "Key": "Name",
                  "Value": {
                      "Ref": "InstanceName"
                  }
              },
              {
                  "Key": "business",
                  "Value": "oeda"
              },
              {
                  "Key": "application",
                  "Value": "bluebutton"
              },
              {
                  "Key": "stack",
                  "Value": {
                      "Ref": "TagKeyStack"
                  }
              },
              {
                  "Key": "layer",
                  "Value": {
                      "Ref": "TagKeyLayer"
                  }
              },
              {
                  "Key": "az",
                  "Value": {
                      "Ref": "AZone"
                  }
              }
          ],
          "Tenancy": "dedicated",
          "UserData": {
              "Fn::Base64": {
                  "Fn::Join": [
                      "",
                          [
                              "#!/bin/bash -ex",
                              "\n",
                              "export BUILD_LOG=/home/ec2-user/build_status.log \n",
                              "# Set Date Time format for Log \n",
                              "export LOG_TIME=+%Y-%m-%d.%H:%M:%S   \n",
                              "echo $(date $LOG_TIME) Home Directory: >$BUILD_LOG \n",
                              "echo $(date $LOG_TIME)  [$HOME] >>$BUILD_LOG \n",
                              "export HOME=/root \n",
                              "echo $(date $LOG_TIME) $HOME >>$BUILD_LOG \n",
                              "hostname ",
                              {
                                  "Ref": "LBServerName"
                              },
                              " >>$BUILD_LOG \n",
                              "echo $(date $LOG_TIME) 'Hostname configured: ",
                              {
                                  "Ref": "LBServerName"
                              },
                              "' >>$BUILD_LOG \n",

                              "# Splunk name setup \n",
                              "export SPLUNK_LC_NAME=bbapi-",{"Ref":"TagKeyStack"},"-",{"Ref": "TagKeyLayer"}," \n",
                              "export SPLUNK_APP_REF=${SPLUNK_LC_NAME^^} \n",
                              "echo $(date $LOG_TIME) Splunk Ref:$SPLUNK_LC_NAME / $SPLUNK_APP_REF  >>$BUILD_LOG \n",
                              "export SPLUNK_CONF=/opt/splunkforwarder/etc/system/local/deploymentclient.conf \n",
                              "sed -i 's@REPLACE-WITH-APP-NAME@'$SPLUNK_APP_REF'@'  $SPLUNK_CONF \n",

                              "su - splunk -c \"/opt/splunkforwarder/bin/splunk restart\" \n",

                              "mkdir -p /home/ec2-user/script \n",
                              "chown -R ec2-user:root /home/ec2-user/script \n",

                              "# Configure AWS CLI Credentials \n",
                              "export AWS_DEFAULT_REGION=us-east-1 \n",
                              "echo $(date $LOG_TIME) ' Create user:",
                              {
                                  "Ref": "LBMaster"
                              },
                              ".' >>$BUILD_LOG \n",
                              "pass=$(perl -e 'print crypt($ARGV[0], 'password')' $",
                              {
                                  "Ref": "LBPassword"
                              },
                              ") \n",
                              "echo ",
                              {
                                  "Ref": "LBMaster"
                              },
                              ":$pass \n",
                              "useradd -m -p $pass ",
                              {
                                  "Ref": "LBMaster"
                              },
                              " \n",
                              "echo $(date $LOG_TIME) 'Add ",
                              {
                                  "Ref": "LBMaster"
                              },
                              " to sudoers:' >>$BUILD_LOG \n",
                              "echo '",
                              {
                                  "Ref": "LBMaster"
                              },
                              "       ALL=(ALL)       NOPASSWD: ALL' >/etc/sudoers.d/",
                              {
                                  "Ref": "LBMaster"
                              },
                              ".conf \n",
                              "echo $(date $LOG_TIME) ' Installing Apache2' >>$BUILD_LOG \n",

                              "yum -y install httpd \n",
                              "echo $(date $LOG_TIME) ' Installing SSL Module for Apache' >>$BUILD_LOG \n",
                              "yum -y install mod_ssl \n",
                              "echo $(date $LOG_TIME) ' RHEL Version:' >>$BUILD_LOG \n",
                              "cat /etc/redhat-release >>$BUILD_LOG \n",
                              "echo $(date $LOG_TIME) ' package updates... ' >>$BUILD_LOG \n",
                              "yum-config-manager --enable rhel-server-rhscl-6-rpms \n",
                              "yum -y update >>$BUILD_LOG \n",
                              "echo $(date $LOG_TIME) ' Installing support dependencies' >>$BUILD_LOG \n",
                              "yum -y groupinstall 'Development Tools' \n",
                              "yum -y install gcc gcc-c++ httpd-devel zlib-devel bzip2-devel ",
                              " openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel",
                              " db4-devel libpcap-devel xz-devel python-devel postgresql-devel",
                              " libffi.x86_64 python-cffi \n",
                              "mkdir -p /home/ec2-user/download \n",
                              "cd /home/ec2-user/download \n",
                              "echo $(date $LOG_TIME) ' downloading and installing libffi-devel' >>$BUILD_LOG \n",
                              "wget http://mirror.centos.org/centos/6/os/x86_64/Packages/libffi-devel-3.0.5-3.2.el6.x86_64.rpm \n",
                              "yum -y install ./libffi-devel-3.0.5-3.2.el6.x86_64.rpm \n",
                              "echo $(date $LOG_TIME) ' Installing lxml+lxslt' >>$BUILD_LOG \n",
                              "yum -y install libxml2-devel libxslt-devel \n",

                              "echo '/usr/local/lib' >>/etc/ld.so.conf \n",

                              "cd /home/ec2-user/download \n",
                              "echo $(date $LOG_TIME) ' Installing git' >>$BUILD_LOG \n",
                              "yum -y install git \n",

                              "echo $(date $LOG_TIME) ' Setup for front-end app' >>$BUILD_LOG \n",

                              "echo $(date $LOG_TIME) 'Checking SELINUX status' >>$BUILD_LOG \n",
                              "cat /etc/selinux/config >>$BUILD_LOG \n",

                              "# echo $(date $LOG_TIME) ' Configure SELinux' >>$BUILD_LOG \n",
                              "# semanage fcontext -a -t httpd_sys_content_t \"/var/pyapps(/.*)?\" \n",
                              "# semanage fcontext -a -t httpd_sys_content_t \"/var/virtualenv(/.*)?\" \n",
                              "# restorecon -Rv /var \n",
                              "export PY_SERVER=",
                              {
                                  "Ref": "LBServerName"
                              },
                              " \n",

                              "export HTTP_MASTER_CONF=/etc/httpd/conf/httpd.conf \n",
                              "echo 'TraceEnable Off'>>$HTTP_MASTER_CONF \n",
                              "echo '# Appending ServerName to bottom of httpd.conf ' >>$HTTP_MASTER_CONF \n",
                              "echo 'ServerName ",
                              {
                                  "Ref": "LBServerName"
                              },
                              ":80 ' >>$HTTP_MASTER_CONF \n",

                              "export CERT_STORE=/etc/httpd/ssl/certs \n",
                              "export S3_CERT_STORE=s3://bb-certs-manager-dev-test-impl/cert_store/",
                              {
                                  "Ref": "LBServerName"
                              }," \n",

                              "echo $(date $LOG_TIME) 'Configure Load Balancer' >>$BUILD_LOG \n",
                              "# install SSL Certificate update code \n",
                              "cd /root \n",
                              "git clone https://github.com/Neilpang/acme.sh.git \n",
                              "cd /root/acme.sh \n",

                              "mkdir -p $CERT_STORE \n",
                              "echo $(date $LOG_TIME) ' # Save original ssl.conf ' >>$BUILD_LOG \n",
                              "export SSL_CONF=/etc/httpd/conf.d/ssl.conf \n",
                              "mv $SSL_CONF /etc/httpd/conf.d/ssl.conf.orig \n",
                              "echo $(date $LOG_TIME) ' # Build $SSL_CONF' >>$BUILD_LOG \n",

                              "echo '# This is the Apache server configuration file providing SSL support.'  >>$SSL_CONF \n",
                              "echo 'LoadModule ssl_module modules/mod_ssl.so'   >>$SSL_CONF \n",
                              "echo 'Listen 443'   >>$SSL_CONF \n",
                              "echo '##  SSL Global Context'   >>$SSL_CONF \n",
                              "echo '#   Pass Phrase Dialog:'   >>$SSL_CONF \n",
                              "echo 'SSLPassPhraseDialog  builtin'   >>$SSL_CONF \n",
                              "echo '#   Inter-Process Session Cache:'   >>$SSL_CONF \n",
                              "echo 'SSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)'   >>$SSL_CONF \n",
                              "echo 'SSLSessionCacheTimeout  300'   >>$SSL_CONF \n",
                              "echo '#   Semaphore:'   >>$SSL_CONF \n",
                              "echo 'SSLMutex default'   >>$SSL_CONF \n",
                              "echo '#   Pseudo Random Number Generator (PRNG):'   >>$SSL_CONF \n",
                              "echo 'SSLRandomSeed startup file:/dev/urandom  256'   >>$SSL_CONF \n",
                              "echo 'SSLRandomSeed connect builtin'   >>$SSL_CONF \n",
                              "echo 'SSLCryptoDevice builtin'   >>$SSL_CONF \n",
                              "echo '## SSL Virtual Host Context'   >>$SSL_CONF \n",
                              "echo '## See /etc/httpd/conf.d/balancer.conf'   >>$SSL_CONF \n",

                              "export BALANCER_CONF=/etc/httpd/conf.d/balancer.conf \n",
                              "echo $(date $LOG_TIME) ' copying LoadBalancer file into place:' >>$BUILD_LOG \n",
                              "echo $BALANCER_CONF  >>$BUILD_LOG \n",

                              "echo '<VirtualHost *:80>' >>$BALANCER_CONF \n",

                              "echo '    ServerName www.",
                              {
                                  "Ref": "LBServerName"
                              },
                              "'   >>$BALANCER_CONF \n",
                              "echo '    Redirect permanent / https://",
                              {
                                  "Ref": "LBServerName"
                              },
                              "/'   >>$BALANCER_CONF \n",
                              "echo '</VirtualHost> '   >>$BALANCER_CONF \n",
                              "echo '<VirtualHost *:443> '   >>$BALANCER_CONF \n",
                              "echo '    ProxyRequests off '   >>$BALANCER_CONF \n",
                              "echo '    ServerName ",
                              {
                                  "Ref": "LBServerName"
                              },
                              "'   >>$BALANCER_CONF \n",

                              "echo '    # Use separate log files for the SSL virtual host; note that LogLevel ' >>$BALANCER_CONF \n",
                              "echo '    # is not inherited from httpd.conf. ' >>$BALANCER_CONF \n",
                              "echo '    ErrorLog logs/ssl_error_log ' >>$BALANCER_CONF \n",
                              "echo '    TransferLog logs/ssl_access_log ' >>$BALANCER_CONF \n",
                              "echo '    LogLevel warn ' >>$BALANCER_CONF \n",

                              "echo '    # Enable/Disable SSL for this virtual host.' >>$BALANCER_CONF \n",
                              "echo '    SSLEngine on ' >>$BALANCER_CONF \n",

                              "echo '    # SSL Protocol support: ' >>$BALANCER_CONF \n",
                              "echo '    # List the enable protocol levels with which clients will be able to ' >>$BALANCER_CONF \n",
                              "echo '    # connect.  Disable SSLv2 access by default: ' >>$BALANCER_CONF \n",
                              "echo '    SSLProtocol ALL -SSLv2 -SSLv3 ' >>$BALANCER_CONF \n",
                              "echo '    #   SSL Cipher Suite: ' >>$BALANCER_CONF \n",
                              "echo '    SSLHonorCipherOrder on ' >>$BALANCER_CONF \n",
                              "echo '    # SSLCipherSuite DEFAULT:!EXP:!SSLv2:!DES:!IDEA:!SEED:+3DES'   >>$BALANCER_CONF \n",
                              "echo '    SSLCipherSuite ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS ' >>$BALANCER_CONF \n",
                              "echo '    # Server Certificate: ' >>$BALANCER_CONF \n",
                              "echo     SSLCertificateFile $CERT_STORE/cert.pem  >>$BALANCER_CONF \n",
                              "echo '    # Server Private Key:' >>$BALANCER_CONF \n",
                              "echo     SSLCertificateKeyFile $CERT_STORE/key.pem  >>$BALANCER_CONF \n",
                              "echo '    # Server Certificate Chain: ' >>$BALANCER_CONF \n",
                              "echo     SSLCertificateChainFile $CERT_STORE/fullchain.pem  >>$BALANCER_CONF \n",
                              "echo '<Files ~ \"\\.(cgi|shtml|phtml|php3?)$\">'  >>$BALANCER_CONF \n",
                              "echo '    SSLOptions +StdEnvVars '  >>$BALANCER_CONF \n",
                              "echo '</Files>'  >>$BALANCER_CONF \n",
                              "echo '<Directory \"/var/www/cgi-bin\">'  >>$BALANCER_CONF \n",
                              "echo '    SSLOptions +StdEnvVars '  >>$BALANCER_CONF \n",
                              "echo '</Directory> ' >>$BALANCER_CONF \n",
                              "echo 'BrowserMatch \"MSIE [2-6]\"  nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0 '  >>$BALANCER_CONF \n",
                              "echo '    # MSIE 7 and newer should be able to use keepalive '  >>$BALANCER_CONF \n",
                              "echo 'BrowserMatch \"MSIE [17-9]\" ssl-unclean-shutdown '  >>$BALANCER_CONF \n",
                              "echo '    # Per-Server Logging: '   >>$BALANCER_CONF \n",
                              "echo '    # The home of a custom SSL log file. Use this when you want a '   >>$BALANCER_CONF \n",
                              "echo '    # compact non-error SSL logfile on a virtual host basis. '   >>$BALANCER_CONF \n",
                              "echo '    CustomLog logs/ssl_request_log  \"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\\"%r\\\" %b\" '  >>$BALANCER_CONF \n",

                              "echo 'Header add Set-Cookie \"ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/\" env=BALANCER_ROUTE_CHANGED': >>$BALANCER_CONF \n",
                              "echo '    <Proxy balancer://mycluster>' >>$BALANCER_CONF \n",
                              "echo '        # WebHead1' >>$BALANCER_CONF \n",
                              "echo '        BalancerMember \"http://",
                              {
                                  "Ref": "AppServerIp01"
                              },
                              ":80\" route=1' >>$BALANCER_CONF \n",
                              "echo '        # WebHead2' >>$BALANCER_CONF \n",
                              "echo '        BalancerMember \"http://",
                              {
                                  "Ref": "AppServerIp02"
                              },
                              ":80\" route=2' >>$BALANCER_CONF \n",
                              "echo '        # Security - technically we aren't blocking' >>$BALANCER_CONF \n",
                              "echo '        # anyone but this is the place to make those changes.' >>$BALANCER_CONF \n",
                              "echo '        # Load Balancer Settings' >>$BALANCER_CONF \n",
                              "echo '        # Setting a stickier balancer' >>$BALANCER_CONF \n",
                              "echo '        ProxySet stickysession=ROUTEID' >>$BALANCER_CONF \n",
                              "echo '    </Proxy>' >>$BALANCER_CONF \n",
                              "echo '    # Point of Balance' >>$BALANCER_CONF \n",
                              "echo '    # we will balance everything in the site.' >>$BALANCER_CONF \n",
                              "echo '    ProxyPass /balancer-manager !' >>$BALANCER_CONF \n",
                              "echo '    ProxyPass /.well-known ! ' >>$BALANCER_CONF \n",
                              "echo '    ProxyPass / balancer://mycluster/' >>$BALANCER_CONF \n",
                              "echo '    ProxyPassReverse / balancer://mycluster' >>$BALANCER_CONF \n",
                              "echo '</VirtualHost>' >>$BALANCER_CONF \n",

                              "echo $(date $LOG_TIME) ' installing nc via yum - needed for acme.sh ' >>$BUILD_LOG \n",
                              "yum -y install nc \n",
                              "echo $(date $LOG_TIME) ' # install /root/.acme.sh ' >>$BUILD_LOG \n",
                              "cd /root/acme.sh \n",
                              "./acme.sh --install \n",

                              "export AWS_ACCESS_KEY_ID=",
                              {
                                  "Ref": "Route53KeyId"
                              },
                              " \n",
                              "export AWS_SECRET_ACCESS_KEY='",
                              {
                                  "Ref": "Route53AccessKey"
                              },
                              "' \n",

                              "echo $(date $LOG_TIME) ' # update Route53 A Record with Server External IP for Domain Name' >>$BUILD_LOG \n",

                              "export DNS_UPDATE_CONF=/root/dns_change.json \n",

                              "echo $(date $LOG_TIME) Getting EXT_IP_ADDRESS >>$BUILD_LOG \n",
                              "# export EXT_IP_ADDRESS=$(curl ipecho.net/plain) \n",
                              "export EXT_IP_ADDRESS=$(curl -s http://whatismyip.akamai.com/) \n",

                              "echo $(date $LOG_TIME) EXT_IP_ADDRESS:$EXT_IP_ADDRESS >>$BUILD_LOG \n",

                              "echo $(date $LOG_TIME) '# write json batch update in: ' >>$BUILD_LOG \n",
                              "echo $DNS_UPDATE_CONF >>$BUILD_LOG \n",

                              "echo '{' >$DNS_UPDATE_CONF \n",
                              "echo '_DQ_Comment_DQ_: _DQ_Update A Record for Balancer_DQ_,' >>$DNS_UPDATE_CONF \n",
                              "echo '_DQ_Changes_DQ_: [' >>$DNS_UPDATE_CONF \n",
                              "echo '{' >>$DNS_UPDATE_CONF \n",
                              "echo '  _DQ_Action_DQ_: _DQ_UPSERT_DQ_,' >>$DNS_UPDATE_CONF \n",
                              "echo '  \"ResourceRecordSet\": {' >>$DNS_UPDATE_CONF \n",
                              "echo '      _DQ_Name_DQ_: _DQ_",
                              {
                                  "Ref": "LBServerName"
                              },
                              "._DQ_,' >>$DNS_UPDATE_CONF \n",
                              "echo '      _DQ_Type_DQ_: _DQ_A_DQ_, ' >>$DNS_UPDATE_CONF \n",
                              "echo '       _DQ_TTL_DQ_: 300,' >>$DNS_UPDATE_CONF \n",
                              "echo '       _DQ_ResourceRecords_DQ_: [' >>$DNS_UPDATE_CONF \n",
                              "echo ' {_DQ_Value_DQ_: _DQ_",
                              "REPLACE_EXT_IP_ADDRESS",
                              "_DQ_}' >>$DNS_UPDATE_CONF \n",
                              "echo '      ]}}]}' >>$DNS_UPDATE_CONF \n",

                              "sed -i \"s@REPLACE_EXT_IP_ADDRESS@${EXT_IP_ADDRESS}@g\" $DNS_UPDATE_CONF \n",
                              "sed -i 's@_DQ_@\"@g' $DNS_UPDATE_CONF \n",

                              "/usr/local/bin/aws route53 change-resource-record-sets ",
                              "--hosted-zone-id ",
                              {
                                  "Ref": "Route53Zone"
                              },
                              " --change-batch file://$DNS_UPDATE_CONF  \n",

                              "cat $DNS_UPDATE_CONF >>$BUILD_LOG \n",

                              "echo $(date $LOG_TIME) ' # install certs to /root/.acme.sh ' >>$BUILD_LOG \n",
                              "# Configure AWS CLI Credentials \n",
                              "mkdir -p /root/.aws \n",
                              "export AWS_DEFAULT_REGION=us-east-1 \n",

                              "# Get cert from S3 or issue cert and upload to S3 \n",

                              "# Check if files are in S3 \n",
                              "export CHECK_S3_CERTS=/home/ec2-user/download/s3_cert_check.txt \n",

                              "export CERT_FILE=cert.pem \n",
                              "/usr/local/bin/aws s3 ls $S3_CERT_STORE/ >$CHECK_S3_CERTS \n",
                              "if grep $CERT_FILE $CHECK_S3_CERTS  \n",
                              "then   \n",
                              "     /usr/local/bin/aws s3 cp $S3_CERT_STORE/$CERT_FILE $CERT_STORE \n",
                              "else   \n",
                              "     # create an empty file with old datestamp\n",
                              "     touch -d '-2 months' $CERT_STORE/$CERT_FILE \n",
                              "fi      \n",

                              "export CERT_FILE=key.pem \n",
                              "if grep $CERT_FILE $CHECK_S3_CERTS  \n",
                              "then   \n",
                              "     /usr/local/bin/aws s3 cp $S3_CERT_STORE/$CERT_FILE $CERT_STORE \n",
                              "else   \n",
                              "     # create an empty file with old datestamp\n",
                              "     touch -d '-2 months' $CERT_STORE/$CERT_FILE \n",
                              "fi      \n",

                              "export CERT_FILE=fullchain.pem \n",
                              "if grep $CERT_FILE $CHECK_S3_CERTS  \n",
                              "then   \n",
                              "     /usr/local/bin/aws s3 cp $S3_CERT_STORE/$CERT_FILE $CERT_STORE \n",
                              "else   \n",
                              "     # create an empty file with old datestamp\n",
                              "     touch -d '-2 months' $CERT_STORE/$CERT_FILE \n",
                              "fi      \n",

                              "echo $(date $LOG_TIME) ' # Copied certs from ' $S3_CERT_STORE >>$BUILD_LOG \n",
                              "# check if cert is more than 30 days old \n",
                              "export FILE_AGE=+30 \n",
                              "if [[ $(find $CERT_STORE -mtime $FILE_AGE -print) ]] \n",
                              "then  \n",

                              "     echo $(date $LOG_TIME) ' # request new certs from letsencrypt.org ' >>$BUILD_LOG \n",
                              "     /root/.acme.sh/acme.sh --issue --dns dns_aws -d ",
                                    {
                                        "Ref": "LBServerName"
                                    },
                              "     -w /var/www/html --debug --log \n",

                              "     # If we got a cert copy to S3 for future download \n",

                              "     echo $(date $LOG_TIME) ' # install certs ' >>$BUILD_LOG \n",

                              "     /root/.acme.sh/acme.sh --installcert -d ",
                                    {
                                        "Ref": "LBServerName"
                                    },
                              "     --certpath ",
                              "     $CERT_STORE/cert.pem",
                              "     --keypath ",
                              "     $CERT_STORE/key.pem",
                              "     --fullchainpath ",
                              "     $CERT_STORE/fullchain.pem",
                              "     --reloadcmd \"service httpd restart \" \n",

                              "     echo $(date $LOG_TIME) 'Cert loaded to $CERT_STORE' >>$BUILD_LOG \n",

                              "     # Replace certs in S3_CERT_STORE \n",
                              "     # Make sure $S3_CERT_STORE folder exists \n",
                              "     /usr/local/bin/aws s3 cp $CERT_STORE/cert.pem $S3_CERT_STORE \n",
                              "     /usr/local/bin/aws s3 cp $CERT_STORE/key.pem $S3_CERT_STORE \n",
                              "     /usr/local/bin/aws s3 cp $CERT_STORE/fullchain.pem $S3_CERT_STORE \n",

                              "else   \n",

                              "     echo $(date $LOG_TIME) ' # Certs are recent no need to request new certs ' >>$BUILD_LOG \n",

                              "fi     \n",

                              "echo $(date $LOG_TIME) Check for cron job to renew certs >>$BUILD_LOG \n",
                              "crontab -l >>$BUILD_LOG \n",

                              "echo $(date $LOG_TIME) ' Tidying up...' >>$BUILD_LOG \n",

                              "chown -Rf ec2-user:ec2-user /home/ec2-user \n",

                              "echo $(date $LOG_TIME) ' Starting Apache...' >>$BUILD_LOG \n",
                              "chkconfig httpd on \n",
                              "service httpd stop \n",
                              "service httpd start \n",
                              "date -r /home/ec2-user/build_status.log >>$BUILD_LOG \n",
                              "echo $(date $LOG_TIME) \"",
                              {
                                  "Ref": "TagKeyStack"
                              },
                              ":",
                              {
                                  "Ref": "LBServerName"
                              },
                              " Server installed \" >>$BUILD_LOG \n",
                              "echo $(date $LOG_TIME) 'DONE.' >>$BUILD_LOG \n"
                          ]
                  ]
              }
          }
      }
    },

    "MyLbEIP" : {
        "Type" : "AWS::EC2::EIP",
        "Properties" : {
            "InstanceId" : { "Ref" : "LbEcInstance" }
        }
    }
  },
  "Outputs": {
    "LbEc2SecurityGrpId": {
      "Value": {
        "Ref": "LbEc2SecurityGrp"
      },
      "Export": {
          "Name": {
              "Fn::Join": [":", [{"Ref": "InstanceName"},
                                 "LbEc2SecurityGrpId" ]  ]
          }
      },
      "Description": "New Security Group for Load Balancer Instance"
    },
    "LbEcInstanceId": {
      "Value": {
        "Ref": "LbEcInstance"
      },
      "Export": {
          "Name": {
              "Fn::Join": [":", [{"Ref": "InstanceName"},
                                 "LbEcInstanceId" ] ]
          }
      }
    },
    "LbEcPublicIp": {
      "Value": {
        "Fn::GetAtt" : [ "LbEcInstance", "PublicIp" ]
      },
      "Export": {
          "Name": {
              "Fn::Join": [":", [{"Ref": "InstanceName"},
                                "PublicIp" ] ]
          }
      }
    },
      "LbEcPrivateIp": {
      "Value": {
        "Fn::GetAtt" : [ "LbEcInstance", "PrivateIp" ]
      },
      "Export": {
          "Name": {
              "Fn::Join": [":", [{"Ref": "InstanceName"},
                                 "PrivateIp" ] ]
          }
      }
    }
  }

}


