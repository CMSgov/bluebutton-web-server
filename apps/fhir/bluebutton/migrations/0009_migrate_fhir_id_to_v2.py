# Generated by Django 4.2.24 on 2025-09-23 13:25

from django.db import migrations, models


def migrate_fhir_id_to_v2(apps, schema_editor):
    Crosswalk = apps.get_model('bluebutton', 'Crosswalk')
    for crosswalk in Crosswalk.objects.all():
        if crosswalk._fhir_id:
            crosswalk.fhir_id_v2 = crosswalk._fhir_id
            crosswalk.save()
    ArchivedCrosswalk = apps.get_model('bluebutton', 'ArchivedCrosswalk')
    for archived in ArchivedCrosswalk.objects.all():
        if archived._fhir_id:
            archived.fhir_id_v2 = archived._fhir_id
            archived.save()


def reverse_migrate_v2_to_fhir_id(apps, schema_editor):
    Crosswalk = apps.get_model('bluebutton', 'Crosswalk')
    for crosswalk in Crosswalk.objects.all():
        if crosswalk.fhir_id_v2:
            crosswalk._fhir_id = crosswalk.fhir_id_v2
            crosswalk.save()
    ArchivedCrosswalk = apps.get_model('bluebutton', 'ArchivedCrosswalk')
    for archived in ArchivedCrosswalk.objects.all():
        if archived.fhir_id_v2:
            archived._fhir_id = archived.fhir_id_v2
            archived.save()


class Migration(migrations.Migration):

    dependencies = [
        ('bluebutton', '0008_add_v2_v3_fhir_id'),
    ]

    operations = [
        migrations.RunPython(migrate_fhir_id_to_v2, reverse_migrate_v2_to_fhir_id),
        migrations.AddConstraint(  # After migration happens, add constraint that a fhir_id must be present
            model_name='crosswalk',
            constraint=models.CheckConstraint(
                check=models.Q(fhir_id_v2__isnull=False) | models.Q(fhir_id_v3__isnull=False),
                name='at_least_one_fhir_id_required'
            ),
        ),
    ]
